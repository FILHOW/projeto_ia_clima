# clima_mvp/app/app.py
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import streamlit as st
import pandas as pd
from core.modelo_clima import criar_banco_de_dados_e_tabelas, inserir_dados_nas_tabelas, treinar_modelo, carregar_modelo_e_prever, dropar_banco_de_dados

st.set_page_config(page_title="Previs√£o de Precipita√ß√£o", page_icon="üåßÔ∏è", layout="wide")
st.title("üåßÔ∏è Previs√£o de Precipita√ß√£o")
st.markdown("""
    Este aplicativo executa um **pipeline de dados completo** para um projeto de machine learning.
    O objetivo √© treinar um **modelo de Regress√£o Linear** para prever a precipita√ß√£o.
""")

st.sidebar.header("‚öôÔ∏è Controle de Pipeline")
btn_criar_db = st.sidebar.button("1. Criar e Popular o Banco")
btn_dropar_db = st.sidebar.button("3. Excluir o Banco de Dados")

st.sidebar.markdown("---")
st.sidebar.subheader("Op√ß√£o de Modelo")
model_option = st.sidebar.radio("Escolha a a√ß√£o para o modelo:", ("Treinar Modelo", "Usar Modelo Salvo"))
btn_executar_modelo = st.sidebar.button("2. Executar A√ß√£o do Modelo")

if btn_criar_db:
    with st.spinner('Criando banco de dados e inserindo dados...'):
        sucesso_criar, msg_criar = criar_banco_de_dados_e_tabelas()
        if sucesso_criar:
            st.success(msg_criar)
            sucesso_inserir, msg_inserir = inserir_dados_nas_tabelas()
            if sucesso_inserir:
                st.success(msg_inserir)
            else:
                st.error(msg_inserir)
        else:
            st.error(msg_criar)

if btn_executar_modelo:
    with st.spinner('Executando a a√ß√£o do modelo...'):
        if model_option == "Treinar Modelo":
            sucesso_modelo, modelo, metricas, coef_df, msg = treinar_modelo()
        else:
            sucesso_modelo, modelo, metricas, coef_df, msg = carregar_modelo_e_prever()

        if sucesso_modelo:
            st.success(msg)
            
            st.header("üìà Resultados da An√°lise")
            st.markdown("""
                As m√©tricas a seguir avaliam o desempenho do modelo em prever a precipita√ß√£o:
                * **MAE (Erro Absoluto M√©dio):** A m√©dia da diferen√ßa absoluta entre as previs√µes e os valores reais. Quanto menor, melhor.
                * **MSE (Erro Quadr√°tico M√©dio):** A m√©dia do quadrado das diferen√ßas. Puni os erros maiores, sendo mais sens√≠vel a outliers.
                * **RMSE (Raiz do Erro Quadr√°tico M√©dio):** A raiz quadrada do MSE, na mesma unidade da vari√°vel de destino. Facilita a interpreta√ß√£o.
                * **R-quadrado (R¬≤):** Indica a propor√ß√£o da variabilidade da vari√°vel de destino que √© explicada pelo modelo. Um valor mais pr√≥ximo de 1 indica que o modelo se ajusta bem aos dados.
            """)
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("MAE", f"**{metricas['MAE']:.2f}**")
            with col2:
                st.metric("MSE", f"**{metricas['MSE']:.2f}**")
            with col3:
                st.metric("RMSE", f"**{metricas['RMSE']:.2f}**")
            with col4:
                st.metric("R-quadrado", f"**{metricas['R2']:.2%}**")

            st.subheader("üìö Coeficientes do Modelo (Import√¢ncia das Vari√°veis)")
            st.markdown("""
                Os coeficientes indicam o "peso" de cada vari√°vel na previs√£o da precipita√ß√£o.
                * **Valores positivos:** Aumento na vari√°vel corresponde a um aumento na precipita√ß√£o prevista.
                * **Valores negativos:** Aumento na vari√°vel corresponde a uma diminui√ß√£o na precipita√ß√£o prevista.
                * **Magnitude:** O valor absoluto do coeficiente indica a for√ßa do impacto na previs√£o.
            """)
            st.dataframe(coef_df, use_container_width=True)
        else:
            st.error(f"Erro ao executar a a√ß√£o do modelo: {msg}")

if btn_dropar_db:
    sucesso_drop, msg_drop = dropar_banco_de_dados()
    if sucesso_drop:
        st.success(msg_drop)
    else:
        st.warning(msg_drop)